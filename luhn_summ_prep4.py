# -*- coding: utf-8 -*-
"""Luhn Summ Prep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o4Hg8vf9SLamEMjeXjcxP6lR0ieRe5ux
"""

def LuhnSumm(doc,number_sent,Percent_breakup,PlaintextParser,KLSummarizer,Tokenizer):
  parser=PlaintextParser.from_string(doc,Tokenizer("english"))
  summary=''
  summarizer = KLSummarizer()
  #Summarize the document with 4 sentences
  k= int(Percent_breakup*number_sent)
  summary = summarizer(parser.document,k)

  return summary

def preparing_presentation_data(doc,corp_participant):
  corp_participant= corp_participant.split("  ")
  for i in range(len(corp_participant)):
    if corp_participant[i][-1]==" ":    
      corp_participant[i]=corp_participant[i][0:(len(corp_participant[i])-1)]

  corp_participant=corp_participant[1:]

  participant_index=[]
    
  for i in range(len(corp_participant)):
    if doc.count(corp_participant[i])>0:
      j= doc.index(corp_participant[i])
      participant_index.append(j)
    else:
      participant_index.append(0)

  dup_participant_index=participant_index[:]
  dup_corp_participant=[]
  dup_participant_index.sort()

  for i in dup_participant_index:
    if i!=0:
      index_i= participant_index.index(i)
      dup_corp_participant.append(corp_participant[index_i])

  presentation_doc=[]

  for i in range(len(dup_corp_participant)-1):
    index_i=doc.index(dup_corp_participant[i])
    index_j=doc.index(dup_corp_participant[i+1])
    x=doc[index_i:index_j]
    x=x.replace(dup_corp_participant[i],dup_corp_participant[i]+"\n\n")
    presentation_doc.append(x)
    if i+1==len(dup_corp_participant)-1:
      x=doc[index_j:]
      x=x.replace(dup_corp_participant[i+1],dup_corp_participant[i+1]+"\n\n")
      presentation_doc.append(x)
    


  if len(dup_corp_participant)==1:
    
    index_i=doc.index(dup_corp_participant[0])
    x=doc[index_i:]
    x=x.replace(dup_corp_participant[0],dup_corp_participant[0]+"\n\n")
    presentation_doc.append(x)

    
  return presentation_doc,dup_corp_participant


def KL_summ_prep(files,sent_tokenize,All_docs_corporate_participants,All_docs_presentations,All_docs_answers,All_docs_questions,PlaintextParser,KLSummarizer,Percent_breakup,Tokenizer):
  All_docs_KL_summarized=[]
  for i in range(len(files)):
    doc_summary=[]
    answer_summary=[]
    presentation_summary=[]  
    pres,partp=All_docs_presentations[i],All_docs_corporate_participants[i]
    presentation_doc,corp_participant=preparing_presentation_data(pres,partp)
    j=0
    for speaker_data in presentation_doc:
      numb_sent=len(sent_tokenize(speaker_data))
      presentation_summ=LuhnSumm(speaker_data,numb_sent,Percent_breakup,PlaintextParser,KLSummarizer,Tokenizer)
      presentation_summ=str(presentation_summ)
      if presentation_summary.count(corp_participant[j])==0:
        presentation_summ= corp_participant[j]+" " + presentation_summ[:]
      j+=1
      presentation_summ=presentation_summ+" \n"
      presentation_summary.append(presentation_summ)

    for j in range(len(All_docs_answers[i])):
      numb_sent=len(sent_tokenize(All_docs_answers[i][j]))    
      content_sent=sent_tokenize(All_docs_answers[i][j])    
      summary = LuhnSumm(All_docs_answers[i][j],numb_sent,Percent_breakup,PlaintextParser,KLSummarizer,Tokenizer)
      summary=str(summary)
      if summary.count(content_sent[0])==0:
        summary=content_sent[0]+summary
      x="Answer"+"-"+str(j+1)+" :"
      summary=summary.replace("Answer:",x)
      y=summary
      y=y.replace("<Sentence:","")
      y=y.replace(">","")
      y=y.replace("(","")
      y=y.replace(")","")
      y=y.replace(".,",".")

      answer_summary.append(y)
    
    doc_summary.append(files[i])
    doc_summary.append(presentation_summary)

    for j in range(len(All_docs_answers[i])):
      x= "Question"+"-"+str(j+1)+" :"
      All_docs_questions[i][j]=All_docs_questions[i][j].replace("Question:",x)
      doc_summary.append(All_docs_questions[i][j])
      doc_summary.append(answer_summary[j])
    
    All_docs_KL_summarized.append(doc_summary)
  
  return All_docs_KL_summarized